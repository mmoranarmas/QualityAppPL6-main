{"version":3,"file":"static/js/247.b64c2493.chunk.js","mappings":";kLAOA,MAAMA,EAAiBA,KACnB,MAAMC,EAAMC,OACZD,EAAIE,iBAAiB,aAAa,MAC9BC,EAAAA,EAAAA,KAAS,KACL,MAAMC,EAAQJ,EAAIK,WACZC,EAASN,EAAIO,YACbC,EAAKC,SAASC,iBAAiBN,EAAQ,EAAGE,EAAS,GACzD,IAAKE,EACD,OAEJ,MAAMG,GAAYC,EAAAA,EAAAA,GAAsBJ,GACpCG,GACA,IAAIE,SAASC,IAAYC,EAAAA,EAAAA,GAAiBJ,EAAWG,KAAUE,MAAK,MAChEC,EAAAA,EAAAA,KAAUC,UAQNP,EAAUQ,MAAMC,YAAY,aAAc,gBACpCC,EAAAA,EAAAA,GAAYV,EAAW,KAC7BA,EAAUQ,MAAMG,eAAe,aAAa,GAC9C,GAEV,GACF,GACJ,yEC7BN,MACMC,EAA+B,cAC/BC,EAA6B,2BAQ7BC,EAAuB,GAAGF,MAAiCC,IAC3DE,EAAgBlB,GAXO,gBAWAA,EAAGmB,QAW1BC,EAAmBV,SACjBQ,EAAalB,UACP,IAAIK,SAASC,IAAYC,EAAAA,EAAAA,GAAiBP,EAAIM,KAC7CN,EAAGoB,oBAEPpB,EAqBLI,EAAyBJ,GACpBA,EAAGqB,QAAQJ,GAMhBJ,EAAcA,CAACb,EAAIsB,KACrB,GAAIJ,EAAalB,GAAK,CAElB,OADgBA,EACDa,YAAYS,EAC/B,CACA,OAAOjB,QAAQC,QAAQN,EAAGuB,SAAS,CAC/BC,IAAK,EACLC,KAAM,EACNC,SAAUJ,EAAa,EAAI,SAAW,SACvC,EAMDK,EAAgBA,CAAC3B,EAAI4B,EAAGC,EAAGP,KAC7B,GAAIJ,EAAalB,GAAK,CAElB,OADgBA,EACD2B,cAAcC,EAAGC,EAAGP,EACvC,CACA,OAAOjB,QAAQC,QAAQN,EAAG8B,SAAS,CAC/BN,IAAKK,EACLJ,KAAMG,EACNF,SAAUJ,EAAa,EAAI,SAAW,SACvC","sources":["../node_modules/@ionic/core/components/status-tap.js","../node_modules/@ionic/core/components/index8.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { readTask, writeTask } from '@stencil/core/internal/client';\nimport { a as findClosestIonContent, s as scrollToTop } from './index8.js';\nimport { c as componentOnReady } from './helpers.js';\n\nconst startStatusTap = () => {\n    const win = window;\n    win.addEventListener('statusTap', () => {\n        readTask(() => {\n            const width = win.innerWidth;\n            const height = win.innerHeight;\n            const el = document.elementFromPoint(width / 2, height / 2);\n            if (!el) {\n                return;\n            }\n            const contentEl = findClosestIonContent(el);\n            if (contentEl) {\n                new Promise((resolve) => componentOnReady(contentEl, resolve)).then(() => {\n                    writeTask(async () => {\n                        /**\n                         * If scrolling and user taps status bar,\n                         * only calling scrollToTop is not enough\n                         * as engines like WebKit will jump the\n                         * scroll position back down and complete\n                         * any in-progress momentum scrolling.\n                         */\n                        contentEl.style.setProperty('--overflow', 'hidden');\n                        await scrollToTop(contentEl, 300);\n                        contentEl.style.removeProperty('--overflow');\n                    });\n                });\n            }\n        });\n    });\n};\n\nexport { startStatusTap };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { c as componentOnReady } from './helpers.js';\nimport { b as printRequiredElementError } from './index6.js';\n\nconst ION_CONTENT_TAG_NAME = 'ION-CONTENT';\nconst ION_CONTENT_ELEMENT_SELECTOR = 'ion-content';\nconst ION_CONTENT_CLASS_SELECTOR = '.ion-content-scroll-host';\n/**\n * Selector used for implementations reliant on `<ion-content>` for scroll event changes.\n *\n * Developers should use the `.ion-content-scroll-host` selector to target the element emitting\n * scroll events. With virtual scroll implementations this will be the host element for\n * the scroll viewport.\n */\nconst ION_CONTENT_SELECTOR = `${ION_CONTENT_ELEMENT_SELECTOR}, ${ION_CONTENT_CLASS_SELECTOR}`;\nconst isIonContent = (el) => el.tagName === ION_CONTENT_TAG_NAME;\n/**\n * Waits for the element host fully initialize before\n * returning the inner scroll element.\n *\n * For `ion-content` the scroll target will be the result\n * of the `getScrollElement` function.\n *\n * For custom implementations it will be the element host\n * or a selector within the host, if supplied through `scrollTarget`.\n */\nconst getScrollElement = async (el) => {\n    if (isIonContent(el)) {\n        await new Promise((resolve) => componentOnReady(el, resolve));\n        return el.getScrollElement();\n    }\n    return el;\n};\n/**\n * Queries the element matching the selector for IonContent.\n * See ION_CONTENT_SELECTOR for the selector used.\n */\nconst findIonContent = (el) => {\n    /**\n     * First we try to query the custom scroll host selector in cases where\n     * the implementation is using an outer `ion-content` with an inner custom\n     * scroll container.\n     */\n    const customContentHost = el.querySelector(ION_CONTENT_CLASS_SELECTOR);\n    if (customContentHost) {\n        return customContentHost;\n    }\n    return el.querySelector(ION_CONTENT_SELECTOR);\n};\n/**\n * Queries the closest element matching the selector for IonContent.\n */\nconst findClosestIonContent = (el) => {\n    return el.closest(ION_CONTENT_SELECTOR);\n};\n/**\n * Scrolls to the top of the element. If an `ion-content` is found, it will scroll\n * using the public API `scrollToTop` with a duration.\n */\nconst scrollToTop = (el, durationMs) => {\n    if (isIonContent(el)) {\n        const content = el;\n        return content.scrollToTop(durationMs);\n    }\n    return Promise.resolve(el.scrollTo({\n        top: 0,\n        left: 0,\n        behavior: durationMs > 0 ? 'smooth' : 'auto',\n    }));\n};\n/**\n * Scrolls by a specified X/Y distance in the component. If an `ion-content` is found, it will scroll\n * using the public API `scrollByPoint` with a duration.\n */\nconst scrollByPoint = (el, x, y, durationMs) => {\n    if (isIonContent(el)) {\n        const content = el;\n        return content.scrollByPoint(x, y, durationMs);\n    }\n    return Promise.resolve(el.scrollBy({\n        top: y,\n        left: x,\n        behavior: durationMs > 0 ? 'smooth' : 'auto',\n    }));\n};\n/**\n * Prints an error informing developers that an implementation requires an element to be used\n * within either the `ion-content` selector or the `.ion-content-scroll-host` class.\n */\nconst printIonContentErrorMsg = (el) => {\n    return printRequiredElementError(el, ION_CONTENT_ELEMENT_SELECTOR);\n};\n/**\n * Several components in Ionic need to prevent scrolling\n * during a gesture (card modal, range, item sliding, etc).\n * Use this utility to account for ion-content and custom content hosts.\n */\nconst disableContentScrollY = (contentEl) => {\n    if (isIonContent(contentEl)) {\n        const ionContent = contentEl;\n        const initialScrollY = ionContent.scrollY;\n        ionContent.scrollY = false;\n        /**\n         * This should be passed into resetContentScrollY\n         * so that we can revert ion-content's scrollY to the\n         * correct state. For example, if scrollY = false\n         * initially, we do not want to enable scrolling\n         * when we call resetContentScrollY.\n         */\n        return initialScrollY;\n    }\n    else {\n        contentEl.style.setProperty('overflow', 'hidden');\n        return true;\n    }\n};\nconst resetContentScrollY = (contentEl, initialScrollY) => {\n    if (isIonContent(contentEl)) {\n        contentEl.scrollY = initialScrollY;\n    }\n    else {\n        contentEl.style.removeProperty('overflow');\n    }\n};\n\nexport { ION_CONTENT_CLASS_SELECTOR as I, findClosestIonContent as a, ION_CONTENT_ELEMENT_SELECTOR as b, scrollByPoint as c, disableContentScrollY as d, findIonContent as f, getScrollElement as g, isIonContent as i, printIonContentErrorMsg as p, resetContentScrollY as r, scrollToTop as s };\n"],"names":["startStatusTap","win","window","addEventListener","readTask","width","innerWidth","height","innerHeight","el","document","elementFromPoint","contentEl","findClosestIonContent","Promise","resolve","componentOnReady","then","writeTask","async","style","setProperty","scrollToTop","removeProperty","ION_CONTENT_ELEMENT_SELECTOR","ION_CONTENT_CLASS_SELECTOR","ION_CONTENT_SELECTOR","isIonContent","tagName","getScrollElement","closest","durationMs","scrollTo","top","left","behavior","scrollByPoint","x","y","scrollBy"],"sourceRoot":""}